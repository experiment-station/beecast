'use client';

import type { Tables } from '@/types/supabase/database';

import { createSupabaseBrowserClient } from '@/lib/services/supabase/browser';
import { Avatar, Flex, Text } from '@radix-ui/themes';
import { useEffect, useRef, useState } from 'react';
import { CgProfile } from 'react-icons/cg';

type Props = {
  id: Tables<'episode'>['id'];
};

const fetchData = async (id: Props['id']) => {
  const supabase = createSupabaseBrowserClient();

  const { data } = await supabase
    .from('episode_content')
    .select('id, user:account(id, display_name, avatar_url)')
    .eq('episode', id)
    .single();

  return data?.user ? { user: data.user } : { user: null };
};

export function EpisodeAISummaryFooter(props: Props) {
  const startedRef = useRef(false);
  const [data, setData] = useState<Awaited<
    ReturnType<typeof fetchData>
  > | null>(null);

  useEffect(() => {
    if (!startedRef.current) {
      startedRef.current = true;

      void fetchData(props.id)
        .then(setData)
        .catch(() => null);
    }
  }, [props.id]);

  if (data === null) {
    return null;
  }

  return data.user ? (
    <Flex align="center" gap="1">
      <Avatar
        fallback={<CgProfile />}
        radius="full"
        size="1"
        src={data.user.avatar_url ?? ''}
      />

      <Text color="gray" size="1">
        Generated by <Text highContrast>{data.user.display_name}</Text>
      </Text>
    </Flex>
  ) : (
    <Text color="gray" size="1">
      Generated by a generous beecast user.
    </Text>
  );
}
