import type { Tables } from '@/types/supabase/database';

import { DatabaseError } from '@/lib/errors';
import { fetchAccountAICredits } from '@/lib/services/account';
import { createSupabaseServerClient } from '@/lib/services/supabase/server';
import { Avatar, Box, Flex, Text } from '@radix-ui/themes';
import { cookies } from 'next/headers';
import { CgProfile } from 'react-icons/cg';

import { CollapsiblePanel } from '../ui/collapsible-panel';
import { EpisodeAIThingyGenerator } from './episode-ai-thingy-generator';

type Props = {
  id: Tables<'episode'>['id'];
};

export async function EpisodeAIThingy(props: Props) {
  const supabase = createSupabaseServerClient(cookies());

  const credits = await fetchAccountAICredits();

  const { data, error } = await supabase
    .from('episode_content')
    .select('*, user:account(id, display_name, avatar_url)')
    .eq('episode', props.id);

  if (error) {
    throw new DatabaseError(error);
  }

  if (data.length === 0) {
    return <EpisodeAIThingyGenerator credits={credits} id={props.id} />;
  }

  const [episodeContent] = data;

  return (
    <Flex direction="column" gap="2">
      <CollapsiblePanel title="Episode summary">
        <Box
          style={{
            whiteSpace: 'pre-wrap',
          }}
        >
          {episodeContent.text_summary}
        </Box>
      </CollapsiblePanel>

      {episodeContent.user ? (
        <Flex align="center" gap="1">
          <Avatar
            fallback={<CgProfile />}
            radius="full"
            size="1"
            src={episodeContent.user.avatar_url ?? ''}
          />

          <Text color="gray" size="2">
            Generated by{' '}
            <Text highContrast>{episodeContent.user.display_name}</Text>
          </Text>
        </Flex>
      ) : (
        <Text color="gray" size="2">
          Generated by a generous beecast user
        </Text>
      )}
    </Flex>
  );
}
